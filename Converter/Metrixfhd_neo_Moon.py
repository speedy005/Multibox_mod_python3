# Internal filename: /usr/lib/enigma2/python/Components/Converter/SkylineMoon.py# Bytecode version: 3.12.0rc2 (3531)# Source timestamp: 2024-12-11 10:41:44 UTC (1733913704)from enigma import eTimerfrom Components.Converter.Converter import Converterfrom Components.Element import cachedfrom Components.SkylineMoonCalculations import phase, get_julian_datetime, phase_stringfrom Components.Language import languageimport mathimport datetimeDBG = Falseif DBG:    from Components.SkylineComponents import j00zekDEBUGif language.getLanguage() == 'pl_PL':    MoonPhasesDict = {'New Moon': 'NÃ³w', 'Waxing Crescent': 'Sierp przybywajÄ\x85cy', 'First Quarter': 'I kwadra', 'Waxing Gibbous': 'PrzybywajÄ\x85cy ksiÄ\x99Å¼yc garbaty', 'Full Moon': 'PeÅ\x82nia', 'Waning Gibbous': 'UbywajÄ\x85cy ksiÄ\x99Å¼yc garbaty', 'Last Quarter': 'III kwadra', 'Waning Crescent': 'Sierp ubywajÄ\x85cy'}else:    MoonPhasesDict = {'New Moon': 'Luna Nueva', 'Waxing Crescent': 'Luna Creciente', 'First Quarter': 'Cuarto Creciente', 'Waxing Gibbous': 'Cuarto Creciente', 'Full Moon': 'Luna LLena', 'Waning Gibbous': 'Luna Menguante', 'Last Quarter': 'Cuarto Menguante', 'Waning Crescent': 'Luna Nueva'}class Metrixfhd_neo_Moon(Converter, object):    PHASE = 0    ICON = 1    LUMINATION = 2    LUMINATION3 = 3    def __init__(self, arg):        Converter.__init__(self, arg)        if DBG:            j00zekDEBUG('[j00zekMoon:__init__] >>> arg="%s"' % arg)        if arg in ['faza', 'phase']:            self.type = self.PHASE        elif arg in ['obraz', 'icon']:            self.type = self.ICON        elif arg in ['lumination', 'oswietlenie']:            self.type = self.LUMINATION        elif arg in ['lumination3', 'oswietlenie3']:            self.type = self.LUMINATION3        else:            self.type = 'unknown'    def myRound(self, x, base=5):        return int(base * round(float(x) / base))    @cached    def getText(self):        phaseDict = phase(get_julian_datetime(datetime.datetime.now()))        if self.type == self.PHASE:            retTXT = MoonPhasesDict[phase_string(phaseDict['phase'])]            if DBG:                j00zekDEBUG('[j00zekMoon:getText] currentPhase: %s' % retTXT)                return str(retTXT)        elif self.type == self.ICON:            retTXT = self.myRound(phaseDict['phase'] * 100, 5)            if DBG:                j00zekDEBUG('[j00zekMoon:getText] phaseIcon: %s' % retTXT)                return str(retTXT)        elif self.type == self.LUMINATION:            retTXT = phaseDict['illuminated'] * 100            retTXT = str(round(retTXT, 1)) + '%'            if DBG:                j00zekDEBUG('[j00zekMoon:getText] moon Lumination: %s' % retTXT)                return str(retTXT)        elif self.type == self.LUMINATION3:            retTXT = phaseDict['illuminated'] * 100            retTXT = str(round(retTXT, 3)) + '%'            if DBG:                j00zekDEBUG('[j00zekMoon:getText] moon Lumination3: %s' % retTXT)                return str(retTXT)        else:            if DBG:                j00zekDEBUG('[j00zekMoon:getText] Unknown type requested')            retTXT = '---'        return str(retTXT)    text = property(getText)