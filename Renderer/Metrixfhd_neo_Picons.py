# Decompiled with PyLingual (https://pylingual.io)# Internal filename: /usr/lib/enigma2/python/Components/Renderer/SkylinePicons.py# Bytecode version: 3.12.0rc2 (3531)# Source timestamp: 2024-12-11 10:43:38 UTC (1733913818)# SkylinePicons - Bereinigte Version fÃ¼r Python 3.12.9import osimport reimport unicodedatafrom .Renderer import Rendererfrom enigma import ePixmapfrom Tools.Alternatives import GetWithAlternativefrom Tools.Directories import pathExists, SCOPE_SKIN_IMAGE, resolveFilenametry:    from Tools.Directories import SCOPE_CURRENT_SKINexcept ImportError:    from Tools.Directories import SCOPE_ACTIVE_SKIN as SCOPE_CURRENT_SKINfrom Components.Harddisk import harddiskmanagerfrom ServiceReference import ServiceReferencefrom Components.config import config, ConfigBooleansearchPaths = ['/usr/share/enigma2/']lastPiconsDict = {}DBG = Falsedef j00zekDEBUG(myText=None):    if DBG and myText is not None:        print(myText)def initPiconPaths():    for part in harddiskmanager.getMountedPartitions():        addPiconPath(part.mountpoint)    if pathExists('/proc/mounts'):        with open('/proc/mounts', 'r') as f:            for line in f:                if line.startswith('/dev/sd'):                    mountpoint = line.split(' ')[1]                    addPiconPath(mountpoint)def addPiconPath(mountpoint):    if mountpoint == '/':        return    try:        if mountpoint not in searchPaths:            for pp in os.listdir(mountpoint):                lpp = os.path.join(mountpoint, pp) + '/'                if 'picon' in pp and os.path.isdir(lpp):                    for pf in os.listdir(lpp):                        if pf.endswith('.png'):                            searchPaths.append(mountpoint if mountpoint.endswith('/') else mountpoint + '/')                            return    except Exception as e:        j00zekDEBUG(f"[j00zekPicons] Exception: {e}")def onPartitionChange(why, part):    if why == 'add' and part.mountpoint not in searchPaths:        addPiconPath(part.mountpoint)    elif why == 'remove' and part.mountpoint in searchPaths:        searchPaths.remove(part.mountpoint)def findPicon(serviceName, selfPiconType='picon'):    if not serviceName:        return None    findPiconTypeName = f"{selfPiconType}{serviceName}"    if findPiconTypeName in lastPiconsDict:        return lastPiconsDict[findPiconTypeName]    for path in searchPaths:        sPath = path + selfPiconType + '/'        if pathExists(sPath + serviceName + '.png'):            pngname = sPath + serviceName + '.png'            lastPiconsDict[findPiconTypeName] = pngname            return pngname        if pathExists(sPath + serviceName + '.gif'):            pngname = sPath + serviceName + '.gif'            lastPiconsDict[findPiconTypeName] = pngname            return pngname    return Nonedef getPiconName(serviceName, selfPiconType):    sname = '_'.join(GetWithAlternative(serviceName).split(':', 10)[:10])    pngname = findPicon(sname, selfPiconType)    if not pngname:        fields = sname.split('_', 3)        isChanged = False        if len(fields) > 2 and fields[2] not in ('1', '2'):            fields[2] = '1'            isChanged = True        if len(fields) > 0 and fields[0] == '4097':            fields[0] = '1'            isChanged = True        if isChanged:            pngname = findPicon('_'.join(fields), selfPiconType)    if not pngname:        name = ServiceReference(serviceName).getServiceName()        # Python 3-kompatibel: keine unicode() Funktion        name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ASCII')        name = re.sub('[^a-z0-9]', '', name.replace('&', 'and').replace('+', 'plus').replace('*', 'star').lower())        if len(name) > 0:            pngname = findPicon(name, selfPiconType)            if not pngname and len(name) > 2 and name.endswith('hd'):                pngname = findPicon(name[:-2], selfPiconType)    return pngnameclass Metrixfhd_neo_Picons(Renderer):    def __init__(self):        Renderer.__init__(self)        self.piconsize = (0, 0)        self.pngname = ''        self.piconType = 'picon'        self.GifsPath = 'animatedGIFpicons'        self.ShowDefault = True        self.GIFsupport = False    def addPath(self, value):        if not value.endswith('/'):            value += '/'        if value not in searchPaths:            searchPaths.append(value)    def applySkin(self, desktop, parent):        attribs = self.skinAttributes[:]        for attrib, value in self.skinAttributes:            if attrib == 'path':                self.addPath(value)                attribs.remove((attrib, value))            elif attrib == 'size':                self.piconsize = value            elif attrib == 'picontype':                self.piconType = value                attribs.remove((attrib, value))            elif attrib == 'showdefaultpic':                if value in ['False', 'no']:                    self.ShowDefault = False                attribs.remove((attrib, value))            elif attrib == 'gifsupport':                if value in ['True', 'yes']:                    self.GIFsupport = True                attribs.remove((attrib, value))        self.skinAttributes = attribs        return Renderer.applySkin(self, desktop, parent)    GUI_WIDGET = ePixmap    def postWidgetCreate(self, instance):        self.changed((self.CHANGED_DEFAULT,))    def changed(self, what):        if self.instance:            pngname = None            gifname = None            try:                if what[0] is not self.CHANGED_CLEAR:                    if self.source.text:                        if self.GIFsupport:                            gifname = getPiconName(self.source.text, self.GifsPath)                        pngname = getPiconName(self.source.text, self.piconType)                    if pngname is None and self.ShowDefault:                        pngname = findPicon('picon_default', self.piconType)                        if pngname is None and pathExists(resolveFilename(SCOPE_CURRENT_SKIN, 'picon_default.png')):                            pngname = resolveFilename(SCOPE_CURRENT_SKIN, 'picon_default.png')                    if pngname is None:                        self.instance.hide()                    else:                        if self.pngname != pngname:                            self.instance.setScale(1)                            self.instance.setPixmapFromFile(pngname)                            self.instance.show()                            self.pngname = pngname            except Exception as e:                j00zekDEBUG(f"[j00zekPicons]:[changed] Exception: {e}")harddiskmanager.on_partition_list_change.append(onPartitionChange)initPiconPaths()